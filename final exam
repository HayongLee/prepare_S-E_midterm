기말범위  UML p.27부터

껍데기만 있는 클래스 인터페이스

인터페이스만 지켜주면 아래 구조를 바꿔줘도 상관없다

어떤인터페이스가 있다
상속받아서 구현을 해주는놈
인터페이스를 쓰는놈

interface and abstract classes

이태릭체 abstract

오더라는애는 리스트에제공하는 인터페이스를 사용한다

디테일한클래스를 나타내고 싶지 않을때는 패키지다이어그램을 쓴다
서비시스템이라는 의도를 키워드로 나타내준다

유스케이스다이어그램
시스템이 제공하는 기능
functional requirements
서머리같은기능

UML형식으로 requirement 적는 방법

서비스이름
세부스텝 1. 2. 3. 4. 5. 6. 7. 8.

얘기하듯이 말한다고 해서 narrative라고함

Actor

인클루드 공유되는 세부스텝

큰그림을 빠르게 포착 (구현에 대한 내용x)

중요한건 텍스트 텍스트에 집중
너무 복잡하게 하면 안된다

state machine diagrams

객체의 상태변화를 나타내는 다이어그램

특정한 하나의 객체에 대한 움직임

네모박스가 state

셧다운 동그라미 객체소멸

initial pseudostate 처음은아님

candle removed 한다음 [door closed]체크해야할 조건이벤트 True여야함

1,2번이 만족이 될때 트랜지션이 일어나고 3번은 트랜지션이 일어날때 나타날수있는것

하나의 오브젝트를 글로 표현하기 까다로울 때

뻔한건 안그린다 복잡한 애들만 그린다

Git
도구가없으면 협업이 어렵다

큰목적2가지
충돌제어
히스토리관리

버전관리
바뀌는 히스토리를 기록해줌
update
push

모든개발자들이해결해야하는일을 이슈

p.12
통째로 가져와서 자기가 진행후 커밋 로컬하게 일어남 서버로 올림 (푸시)
전버전이랑 바뀐게 없으면 중복저장안하고 실제로 저장되지않음 (점선)

default 가장최신버전

staging area로 올려놈 작업해논것들을

한사이클: edit the file stage the file commit 

새로만든파일은 git add를 통해 staged 상태로 만들어줘야함

git add 수정한파일을 스테이징에 올려주는것

add the file stage the file ---- git add

git commit 새로운버젼

git rm  remove the file

git init 시작
git clone 복제

git status 파일들의 상태를 보여준다.

p.23
앞쪽 staging area
뒤쪽 working dir

working directory에서 수정은 되었지만 staging되지는 않았다.
Staging에 올라간후 또 고쳤다 (커밋을해주려면 다시 git add로 올려줘야함)
A 새파일이 바로 스테이징

Git log – commit history가 나옴






1/8
버전컨트롤시스템
2가지기능
버전트래킹 업데이트되는동안 모든버전을가지고있음
개발자들의 충돌을 방지하는시스템

깃 파일모드 4가지
언트랙드 	언모디파이드 모디파이드 			스테이지드
         	커미티드모드 스테이징에어리아에올려놓아야함
새로추가한파일 (git add를이용해서 올림)

add the file stage the file (git add)

changes to be committed 스테이징에어리아에 올라간애들

changes not staged for commit  (modified) git add로 올려줘야함

git commit 을 해야 새로운버전이 나타남
-m(recommendation) 커밋에 대한 설명

-a 옵션 (git add + git commit)

HEAD 현재 커밋을 나타내는 브랜치

Checkout 위험하다 다날라갈수있어서

Git fetch 변경된 사항을 가져오는 명령어

Git pull ( git fetch + git merge)

Branch

Default branch: master
줄기 브랜치

보고있는 디렉토리가 다 바뀐다 git checkout

fast forward
recursive strategy

branch repeat

어느 위치를 나타내는 포인터

ch4

functional requirements 기능 서비스

non functional requirements 제약사항

requirement 4가지 스텝

elicitation and analysis (고객과 인터뷰)
specification (문서로 쓰는 단계)
validation (문서에쓰는내용을 확인하는 단계) completeness consistency
management (바뀐 리콰이어먼트를 관리) 정식단계라고보진않음

p.3

service
constraint

어떤 서비스를 제공 어떤 제약사항을 쓰는거 == requirements engineering

p.4 -> requirement engineering이 왜어려운지

p.5 리콰이어먼트가 글이기 때문에 오해가 생길수있고 오역이 있을 수 있다.

P.6
F requirement 어떻게 동작하는가 어떻게 움직이면 안된다

NF requirement 수행속도 개발절차제약(기간안에 끝내라/몇달에한번회의) 어디에서 돌아가야하는가(windows / linux)



F requirements 기능
User case diagram
기능의 이름을 쓰고 1 2 3 4

필드에선
input output processing step exception handling

팀에서 리콰이어먼트를 쓸 때는 유의사항

같은 문서에 디테일의 수준을 맞춰야한다 (통합)

p.9 커스터머랑협의해야하는것들
유저 인텐션
디벨로퍼 인터프리테이션

애매하게하면 문제가 발생함

NF requirement 

Reliability 서버가죽지않고잘살아있는거 mean time to failure
반응속도

F requirement 보다 NF requirement를 더 잘 지켜주어야 한다

수치적으로 써놔서 확인

robustness 2번째줄삭제
failure가 일어나도 몇초이내에 다시 시작해야함
data깨질확률이얼마이하여야함

NF requirements에는 객관적인 기준이 있어야한다

고객과 인터뷰
문서화
문서를 검증 앞뒤가 맞는지
변화가 일어나면 수정하는 단계


사용자
개발자
결정권자 팀장
외주

IEEE SRS X 시험범위아님

NF requirement – quantitatively

SRS 읽는사람의 관점이 서로 다름

자연어로 작성

p.21 1번은 유저스토리 스타일

SRS은 2번스타일로 많이 쓴다.

현재스테이트
어떤동작을하면
어떻게 바뀌는지

agile userstory
waterfall SRS

requirements vs design

정렬할것입니다 vs 정렬하는것을 퀵소트로 구현할 것입니다

고객의원하는 바깥의 모습을 리콰이어먼트로 나타내야한다.

p.27
1. 눈으로 검토하는것 (review)
2. 무언가 불확실한 리콰이어먼트 있을때 만들어보고 리콰이어먼트를 확정짓는 것
3. 테스트 시나리오 작성

형상관리 – git


호스트 개발자 플랫폼
타켓 커스터머 플랫폼

호스트랑 타겟이랑 환경이 극도로 다르면 돌아가지 않을 수 있다

gdb <- 서버 디버그

p.40
소프트웨어는 누구나 공유되어야한다 FSF

오픈소스에 대한 서포트를 판다

형상관리 p.47

버전관리
시스템 인테그레이션 (컴파일하는도구)
릴리즈 매니지먼트 어떤 버전을 주었는지 관리 어떤플랫폼에서 어떤GCC버전을 썼는지 까지
이슈 트래커 - 버그관리



시스템 빌딩 – 외부라이브러리까지 링킹
컴파일 – 자기코드

system integration
어떤버전의 컴포넌트가 사용되었는지
재현할수있는 모든 정보를 관리해야한다

변화하는형상을 관리하는 작업 – 형상관리

각자가짠코드를 통합 컴파일 + 빌딩

이슈트래킹 - 이슈를 끊임없이 공유 상황파악

p.51
빌딩할 때는 자동화된 컴파일 시스템이 있는게 중요
컴파일러 참조
configuration files – 어디다가 배포할것인지에 따라 옵션이 다름 같은 코드라도
최종적으로 테스트까지 자동화를 마쳐야 빌드가 성공되었다고 할 수 있다.

p.52
그림을 통해 하고 싶은게 무엇인지 큰그림만 파악

애자일 메쏘드는 오토메이트 테스트된 빌딩(안정화된)을 수시로 한다

mainline – master branch에 새로운 내용을 가져와 fetch를 하는거라고 볼 수 있다.

로컬하게 유닛테스트해보고 완료가되면 회사서버에 올리면 테스트해보고 버전매니지먼트를함

daily building 어제와는 다른 안정화된 버전이 나오게 하자
continuous integration 푸시할때 마다 안정화된 버전을 나오게 하자

안정된 소프트웨어를 팀자체적으로 만들자 (테스트까지)
컴파일앤링킹
SQA팀에 넘긴다
테스트한 리포트를 보내준다
리포트에 있는거를 반영하고 진도를 반영한다

릴리즈 트래킹
소스코드 버전
모든데이터
오에스 버전 / 라이브러리 버전 / other tool

long lifetime systems

release acceptance testing 간단히

원래하기로한걸 잘하는지 테스트 validation testing
이상한 값을넣어도 돌발행동을 하지 않는지 / 대응하는지 defect testing

디펙 오피셜한 문서에 대한 표현 formal
customer 입장에서 발견된 결함

버그 팀끼리 얘기하는 말 / 프로그래머 사이에서 일어난 일

a bug is the result of a coding error
a defect is a deviation from the requirements

not oppsing
inspection - 코드퀄리티
testing - NF requirements 체크 / 몇초 걸렸는지

p.66

뭘테스트할것인지 테스트 대상이되는 코드들이 주어져야 한다

코드에 맞는 결과

p.68

디테일한 레벨을 따로따로 테스트해라

개별적인 유닛이 모여서 더 큰 집합이 컴포넌트 테스팅 / 서브시스템 테스팅

시스템 전체 테스팅

p.69

각각의 오퍼레이션을 테스트
조합해서 테스트

automate unit testing을 사용한다

수시로 수행 기능을 만들때마다 테스팅을 계속 돌린다

test code components

setup 파트 테스팅을 준비하는 단계
call test할 메쏘드를 콜하는 단계
assertion test가 성공했는지 실패했는지 평가하는 단계
tear down 시스템을 원상태로 만드는 단계 / 다른 테스트에서 바뀐 상태로 테스트하면 안된다

p.73
테스트를 짤 때는 영양가 있는 테스트를 짠다

테스트케이스 선택 전략

파티셔닝 테스트
서로 다른 레인지에서 테스트 음수몇개 양수몇개
그룹핑에서 테스트선택

양수그룹 음수그룹 0 (인풋레인지 쪼개기)

가운데값 필수 / 바운더리 체크

가이드라인 베이스 테스트
선배들이 써논 가이드라인 (디펙테스팅관련)

이런경우는 죽는경우가 많으니 이렇게 테스트해보아라

테스트 커버리지를 높이는 노력과 비슷하다

p.78
제네럴 테스팅 가이드라인

이상한값이 나오도록 유도해봐라
아주큰값을 넣어보고

시스템테스팅
이머전트 비해이비어 테스트 가능
여기서부터는 NF requirements를 테스트할 수 있다
문서를 보면서 테스트를 함
각각 기능을 한번씩은 테스트를 해봐야한다
조합해서 테스트 (가이드라인이 있음)
F / NF requirements를 다보면서 테스트
Validation defect test 둘다 해봐라


